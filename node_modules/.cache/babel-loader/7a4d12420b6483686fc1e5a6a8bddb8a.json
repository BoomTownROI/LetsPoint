{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport React, { useState, useEffect, useContext } from 'react';\nimport Router from 'next/router';\nimport cx from 'classnames';\nimport fservice from 'services/fservice';\nimport Gatekeeper from 'containers/Gatekeeper';\nimport Layout from 'components/Layout';\nimport Input from 'components/Input';\nimport Button from 'components/Buttons';\nimport Link from 'next/link';\nimport AuthContext from 'containers/Auth';\nimport AvatarImg from 'components/AvatarImg';\nimport AvatarList from 'components/AvatarList';\nimport MoreDropdown from 'components/MoreDropdown';\nimport { getParticipantsFromMeeting } from 'services/utils';\nimport { Unarchive, Archive, Loader } from 'svgs';\nimport ToggleButton from 'components/ToggleButton';\nexport default (function () {\n  return React.createElement(Gatekeeper, null, React.createElement(DashboardPage, null));\n});\n\nfunction DashboardPage() {\n  var userState = useContext(AuthContext);\n\n  var _React$useState = React.useState('active'),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      uiMode = _React$useState2[0],\n      updateUIMode = _React$useState2[1]; // New meeting form\n\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      newMeetingTitle = _useState2[0],\n      setNewMeetingTitle = _useState2[1];\n\n  var onSubmit = function onSubmit(e) {\n    e.preventDefault();\n    if (!newMeetingTitle.trim()) return;\n    fservice.createMeeting({\n      title: newMeetingTitle\n    }).then(function (val) {\n      Router.push(\"/meeting?mid=\".concat(val.id));\n    });\n  }; // Fetch all meetings, with live updates\n\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isLoading = _useState4[0],\n      updateIsLoading = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      meetings = _useState6[0],\n      setMeetings = _useState6[1];\n\n  useEffect(function () {\n    updateIsLoading(true);\n    setMeetings([]);\n\n    var listener = function listener() {};\n\n    if (uiMode === 'active') {\n      listener = fservice.onMeetingList(function (meetingsData) {\n        updateIsLoading(false);\n        setMeetings(meetingsData);\n      });\n    } else {\n      fservice.getArchivedMeetingList().then(function (meetingData) {\n        updateIsLoading(false);\n        setMeetings(meetingData);\n      });\n    }\n\n    return listener;\n  }, [uiMode]);\n  return React.createElement(Layout, null, React.createElement(\"nav\", {\n    className: \"flex items-center mb-6\"\n  }, React.createElement(\"h1\", {\n    className: \"text-xl\"\n  }, \"Let's Point\"), React.createElement(Link, {\n    href: \"/profile\"\n  }, React.createElement(\"a\", {\n    className: \"ml-auto\"\n  }, React.createElement(AvatarImg, {\n    className: \"w-10 h-10\",\n    src: userState.user.photoURL,\n    alt: \"Your avatar\"\n  })))), React.createElement(Header, {\n    title: \"Meetings\",\n    count: isLoading ? \"\\xA0\" : meetings.length.toString(),\n    toggleChecked: uiMode === 'archived',\n    onToggle: function onToggle() {\n      updateUIMode(function (s) {\n        return s === 'active' ? 'archived' : 'active';\n      });\n      updateIsLoading(true);\n    }\n  }), uiMode === 'active' && !isLoading && React.createElement(React.Fragment, null, meetings.map(function (m) {\n    return React.createElement(MeetingCard, {\n      key: m.id,\n      m: m\n    });\n  }), React.createElement(\"section\", {\n    className: \"mb-6\"\n  }, React.createElement(\"h1\", {\n    className: \"text-lg mb-2\"\n  }, \"Start a new meeting\"), React.createElement(\"form\", {\n    onSubmit: onSubmit,\n    autoComplete: \"off\"\n  }, React.createElement(Input, {\n    id: \"title\",\n    label: \"Title\",\n    value: newMeetingTitle,\n    onChange: function onChange(e) {\n      return setNewMeetingTitle(e.target.value);\n    }\n  }), React.createElement(Button, {\n    type: \"submit\"\n  }, \"Schedule meeting\")))), uiMode === 'archived' && !isLoading && meetings.map(function (m) {\n    return React.createElement(ArchivedMeetingCard, {\n      key: m.id,\n      m: m,\n      afterUnArchive: function afterUnArchive() {\n        return updateUIMode('active');\n      }\n    });\n  }));\n}\n\nvar Header = function Header(_ref) {\n  var title = _ref.title,\n      count = _ref.count,\n      toggleChecked = _ref.toggleChecked,\n      onToggle = _ref.onToggle;\n  return React.createElement(\"header\", {\n    className: \"flex items-center mb-6\"\n  }, React.createElement(\"h1\", {\n    className: \"text-lg\"\n  }, title), React.createElement(\"span\", {\n    style: {\n      fontVariantNumeric: 'tabular-nums'\n    },\n    className: cx('ml-2', 'px-3 py-1', 'text-sm border-2 rounded-full', 'text-teal-1 bg-teal-7 border-teal-2')\n  }, count), React.createElement(ToggleButton, {\n    className: \"ml-auto\",\n    label: \"Archive\",\n    onChange: onToggle,\n    checked: toggleChecked\n  }));\n};\n\nvar MeetingCard = function MeetingCard(_ref2) {\n  var m = _ref2.m;\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      showSpinner = _React$useState4[0],\n      updateShowSpinner = _React$useState4[1];\n\n  return React.createElement(\"article\", {\n    className: \"px-6 py-4 mb-6 shadow rounded-sm border-l-6 border-teal-7\"\n  }, React.createElement(\"header\", {\n    className: \"flex items-start mb-2\"\n  }, React.createElement(\"h1\", {\n    className: \"flex-1\"\n  }, React.createElement(Link, {\n    href: \"/meeting?mid=\".concat(m.id)\n  }, React.createElement(\"a\", {\n    className: \"text-violet-9 no-underline\"\n  }, m.title))), React.createElement(MoreDropdown, {\n    className: \"-mt-2 ml-3 -mr-3\"\n  }, showSpinner && React.createElement(\"div\", {\n    className: \"text-center text-teal-7\"\n  }, React.createElement(Loader, {\n    className: \"animate-spin w-6 h-6\"\n  })), !showSpinner && React.createElement(\"button\", {\n    type: \"button\",\n    className: cx('flex w-full text-left', 'px-6 py-2', 'hover:bg-grey-1'),\n    onClick: function onClick() {\n      updateShowSpinner(true);\n      fservice.archiveMeeting(m.id, 'archive');\n    }\n  }, React.createElement(Archive, {\n    className: \"w-4 h-4 mr-6\"\n  }), React.createElement(\"span\", {\n    className: \"flex-1\"\n  }, \"Archive\")))), React.createElement(AvatarList, {\n    userList: getParticipantsFromMeeting(m)\n  }));\n};\n\nvar ArchivedMeetingCard = function ArchivedMeetingCard(_ref3) {\n  var m = _ref3.m,\n      afterUnArchive = _ref3.afterUnArchive;\n\n  var _React$useState5 = React.useState(false),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      showSpinner = _React$useState6[0],\n      updateShowSpinner = _React$useState6[1];\n\n  return React.createElement(\"article\", {\n    className: \"px-6 py-4 mb-6 shadow rounded-sm border-l-6 border-cyan-6\"\n  }, React.createElement(\"header\", {\n    className: \"flex items-start mb-2\"\n  }, React.createElement(\"h1\", {\n    className: \"flex-1\"\n  }, m.title), React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn--violet btn--sm\",\n    onClick: function onClick() {\n      updateShowSpinner(true);\n      fservice.archiveMeeting(m.id, 'active').then(afterUnArchive);\n    }\n  }, showSpinner ? React.createElement(Loader, {\n    className: \"animate-spin w-6 h-6\"\n  }) : React.createElement(React.Fragment, null, React.createElement(Unarchive, {\n    className: \"w-4 h-4 mr-2\"\n  }), React.createElement(\"span\", {\n    className: \"flex-1\"\n  }, \"Unarchive\")))), React.createElement(AvatarList, {\n    userList: getParticipantsFromMeeting(m)\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}