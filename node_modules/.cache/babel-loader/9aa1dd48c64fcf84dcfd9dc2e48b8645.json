{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _objectDestructuringEmpty from \"@babel/runtime-corejs2/helpers/esm/objectDestructuringEmpty\";\nimport React from 'react';\nimport fservice from 'services/fservice';\nimport Input from 'components/Input';\nimport Button from './Buttons';\nimport ErrorBox from './ErrorBox';\n\nvar CredentialForm = function CredentialForm(_ref) {\n  _objectDestructuringEmpty(_ref);\n\n  // Credential Form\n  var initialState = {\n    url: '',\n    username: '',\n    password: ''\n  };\n\n  var _React$useState = React.useState(initialState),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      values = _React$useState2[0],\n      updateValues = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      isSubmitting = _React$useState4[0],\n      updateIsSubmitting = _React$useState4[1];\n\n  var _React$useState5 = React.useState(''),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      urlValidation = _React$useState6[0],\n      updateUrlValidation = _React$useState6[1];\n\n  var _React$useState7 = React.useState(''),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      error = _React$useState8[0],\n      updateError = _React$useState8[1];\n\n  var handleChange = function handleChange(e) {\n    e.persist();\n    updateValues(function (s) {\n      return _objectSpread({}, s, _defineProperty({}, e.target.name, e.target.value));\n    });\n  };\n\n  var handleSubmit = function handleSubmit(e) {\n    e.preventDefault();\n    var urlError = isValidURL(values.url);\n\n    if (urlError) {\n      updateUrlValidation(urlError);\n      return;\n    }\n\n    updateIsSubmitting(true);\n    fservice.createCredentials(values).then(function () {\n      updateIsSubmitting(false);\n      updateValues({\n        url: '',\n        username: '',\n        password: ''\n      });\n    }, function (err) {\n      updateIsSubmitting(false);\n\n      if (err.code === 'permission-denied') {\n        updateError('Error: Missing or insufficient permissions.');\n      } else {\n        console.error(err);\n        updateError('Error: Something went wrong.');\n      }\n    });\n  };\n\n  return React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    method: \"POST\"\n  }, error && React.createElement(ErrorBox, {\n    className: \"mb-3\"\n  }, error), React.createElement(\"div\", {\n    className: \"mb-6\"\n  }, React.createElement(Input, {\n    type: \"url\",\n    id: \"url\",\n    label: \"Jira URL\",\n    value: values.url,\n    onChange: handleChange,\n    required: true\n  }), React.createElement(\"div\", {\n    className: \"mb-3\"\n  }, React.createElement(\"p\", {\n    className: \"text-sm text-grey-7 italic\"\n  }, \"ie. https://jira.company.com\"), urlValidation && React.createElement(ErrorBox, null, urlValidation)), React.createElement(Input, {\n    type: \"string\",\n    id: \"username\",\n    label: \"Jira Username\",\n    value: values.username,\n    onChange: handleChange,\n    required: true\n  }), React.createElement(Input, {\n    type: \"password\",\n    id: \"password\",\n    label: \"Jira Password\",\n    value: values.password,\n    onChange: handleChange,\n    required: true\n  })), React.createElement(Button, {\n    type: \"submit\",\n    disabled: isSubmitting\n  }, \"Store Credentials\"));\n};\n\nfunction isValidURL(url) {\n  if (url.substr(0, 'https'.length) !== 'https') return 'URL must start with https';\n  if (url.substr(-1, 1) === '/') return 'No trailing slashes';\n  return '';\n}\n\nexport default CredentialForm;","map":null,"metadata":{},"sourceType":"module"}