{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _Object$values from \"@babel/runtime-corejs2/core-js/object/values\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport React from 'react';\nimport cx from 'classnames';\nimport closestFib from 'utils/closestFib';\nimport AvatarList from 'components/AvatarList';\nimport { Trash, Target, PlusCircle, Edit, Loader, Check } from 'svgs';\nimport RadioSet from './RadioSet';\nimport MoreDropdown from 'components/MoreDropdown';\nimport fservice from 'services/fservice';\nimport TicketForm from './NewTicketForm';\nimport ProfileContext from 'containers/Profile';\nimport Button from 'components/Buttons';\n\nvar Ticket = function Ticket(_ref) {\n  var mid = _ref.mid,\n      t = _ref.ticket,\n      currentVote = _ref.currentVote,\n      disableVoting = _ref.disableVoting,\n      onFocusClick = _ref.onFocusClick,\n      voterList = _ref.voterList;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isEditMode = _React$useState2[0],\n      setIsEditMode = _React$useState2[1];\n\n  var profile = React.useContext(ProfileContext);\n\n  if (isEditMode) {\n    return React.createElement(\"article\", {\n      className: \"my-3\"\n    }, React.createElement(TicketForm, {\n      ticket: {\n        title: t.title,\n        link: t.link,\n        description: t.description,\n        source: t.source\n      },\n      onSubmit: function onSubmit(updatedFields) {\n        return fservice.updateTicket(mid, _objectSpread({\n          id: t.id\n        }, updatedFields)).then(function () {\n          setIsEditMode(false);\n        });\n      },\n      formButtons: React.createElement(\"div\", {\n        className: \"flex\"\n      }, React.createElement(Button, {\n        type: \"submit\",\n        className: \"mr-3\"\n      }, React.createElement(PlusCircle, {\n        className: \"w-5 h-5 mr-2\"\n      }), \"Update Ticket\"), React.createElement(\"button\", {\n        type: \"button\",\n        onClick: function onClick() {\n          return setIsEditMode(false);\n        }\n      }, \"Cancel\"))\n    }));\n  }\n\n  return React.createElement(\"article\", null, React.createElement(\"header\", {\n    className: \"flex items-baseline mb-2\"\n  }, React.createElement(\"h1\", {\n    className: \"text-lg leading-tight flex-1\"\n  }, React.createElement(Title, {\n    title: t.title,\n    link: t.link\n  })), React.createElement(\"button\", {\n    title: \"Draw focus to this ticket for all users\",\n    type: \"button\",\n    onClick: onFocusClick,\n    className: \"btn-fab btn--grey ml-3\"\n  }, React.createElement(Target, {\n    className: \"w-4 h-4\"\n  })), React.createElement(MoreDropdown, null, React.createElement(\"button\", {\n    type: \"button\",\n    className: cx('flex w-full text-left', 'px-6 py-2', 'hover:bg-grey-1'),\n    onClick: function onClick() {\n      return setIsEditMode(true);\n    }\n  }, React.createElement(Edit, {\n    className: \"w-4 h-4 mr-6\"\n  }), React.createElement(\"span\", {\n    className: \"flex-1\"\n  }, \"Edit\")), React.createElement(\"hr\", {\n    className: \"border-b my-2\"\n  }), React.createElement(\"button\", {\n    type: \"button\",\n    className: cx('flex w-full text-left', 'px-6 py-2', 'hover:bg-grey-1'),\n    onClick: function onClick() {\n      return fservice.deleteTicket(mid, t.id);\n    }\n  }, React.createElement(Trash, {\n    className: \"w-4 h-4 mr-6\"\n  }), React.createElement(\"span\", {\n    className: \"flex-1\"\n  }, \"Delete\")))), t.description && React.createElement(\"div\", {\n    className: \"mb-3\"\n  }, t.description), t.isRevealed && React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: \"mb-2\"\n  }, \"Average: \", closestFib(_Object$values(t.votes))), t.source === 'jira' && profile !== null && profile.hasCreds && React.createElement(\"div\", {\n    className: \"mb-2\"\n  }, React.createElement(JiraPushForm, {\n    ticket: t,\n    initialValue: t.committedValue !== undefined ? t.committedValue : closestFib(_Object$values(t.votes)),\n    onSubmit: function onSubmit(value) {\n      return fservice.pushPointsToJira(_defineProperty({}, t.id, value)).then(function () {\n        fservice.updateTicket(mid, {\n          id: t.id,\n          committedValue: value\n        });\n      });\n    }\n  }))), React.createElement(\"div\", {\n    className: \"mb-2\"\n  }, !t.isRevealed && React.createElement(\"button\", {\n    type: \"button\",\n    className: \"text-violet-5 underline\",\n    onClick: function onClick() {\n      return fservice.revealTicket(mid, t.id);\n    }\n  }, \"Reveal votes\")), React.createElement(\"form\", {\n    className: \"mb-2\"\n  }, React.createElement(RadioSet, {\n    id: t.id,\n    value: currentVote,\n    onChange: function onChange(vote) {\n      return fservice.voteOnTicket(mid, t.id, vote);\n    },\n    allVotes: t.isRevealed ? summarizeVotes(t.votes) : {},\n    disabled: disableVoting\n  })), React.createElement(\"div\", {\n    className: \"mx-1\"\n  }, React.createElement(AvatarList, {\n    imgSize: \"small\",\n    userList: voterList,\n    getDotColor: function getDotColor(id) {\n      return t.votes[id] === undefined ? 'bg-red-1' : '';\n    }\n  })));\n};\n/**\n * Go from {uid: option} to {option: totalVotes}\n */\n\n\nfunction summarizeVotes(votes) {\n  return _Object$values(votes).reduce(function (prev, cur) {\n    return _objectSpread({}, prev, _defineProperty({}, cur, (prev[cur] || 0) + 1));\n  }, {});\n}\n\nexport var Title = function Title(_ref2) {\n  var title = _ref2.title,\n      link = _ref2.link;\n\n  if (link) {\n    return React.createElement(\"a\", {\n      href: link,\n      target: \"_blank\"\n    }, title);\n  } // TODO: deprecate turning part of the title into a link\n\n\n  var URLRegex = /^(http[s]?:\\/\\/|www\\.)+[^\\s]+[\\w]/;\n  var linkPieces = title.match(URLRegex);\n\n  if (linkPieces !== null) {\n    var _link = linkPieces[0];\n    var restOfTitle = title.replace(linkPieces[0], '');\n    return React.createElement(React.Fragment, null, React.createElement(\"a\", {\n      href: _link,\n      target: \"_blank\"\n    }, _link), restOfTitle);\n  } // end TODO\n\n\n  return React.createElement(React.Fragment, null, title);\n};\n\nvar JiraPushForm = function JiraPushForm(_ref3) {\n  var ticket = _ref3.ticket,\n      initialValue = _ref3.initialValue,\n      _onSubmit = _ref3.onSubmit;\n\n  var _React$useState3 = React.useState(initialValue),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      committedValue = _React$useState4[0],\n      updateValue = _React$useState4[1];\n\n  var _React$useState5 = React.useState(false),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      isSubmitting = _React$useState6[0],\n      updateSubmit = _React$useState6[1];\n\n  return React.createElement(\"form\", {\n    className: \"\",\n    method: \"POST\",\n    onSubmit: function onSubmit(e) {\n      e.preventDefault();\n\n      if (committedValue === '') {\n        // We could add an error here\n        return;\n      }\n\n      updateSubmit(true);\n\n      _onSubmit(committedValue).then(function () {\n        updateSubmit(false);\n      });\n    }\n  }, React.createElement(\"div\", {\n    className: \"inline-flex items-center\"\n  }, React.createElement(\"label\", null, \"Committed value:\"), React.createElement(\"input\", {\n    type: \"text\",\n    required: true,\n    disabled: isSubmitting,\n    value: committedValue,\n    onChange: function onChange(e) {\n      var v = _parseInt(e.target.value, 10);\n\n      updateValue(isNaN(v) ? '' : v);\n    },\n    className: cx('mx-2 w-10 text-center', 'py-2 placeholder:text-grey-8', 'border-b border-gray-3', 'outline-none focus:border-teal-7')\n  }), React.createElement(\"button\", {\n    disabled: isSubmitting,\n    className: cx('bg-teal-7 hover:bg-teal-8', 'text-teal-1 hover:text-teal-2 font-bold font-header leading-none', 'px-3 py-2 rounded-sm shadow-md', 'flex items-center'),\n    type: \"submit\"\n  }, ticket.committedValue === committedValue && React.createElement(Check, {\n    className: \"w-4 h-4 mr-2\"\n  }), isSubmitting && React.createElement(Loader, {\n    className: \"animate-spin w-4 h-4 mr-2\"\n  }), \"Push to Jira\")));\n};\n\nexport default Ticket;","map":null,"metadata":{},"sourceType":"module"}