{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _Array$isArray from \"@babel/runtime-corejs2/core-js/array/is-array\";\nimport React, { useState, useContext, useEffect, useRef } from 'react';\nimport Router from 'next/router';\nimport Link from 'next/link';\nimport cx from 'classnames';\nimport fservice from 'services/fservice';\nimport AuthConsumer from 'containers/Auth';\nimport Gatekeeper from 'containers/Gatekeeper';\nimport useQuerystring from 'hooks/useQuerystring';\nimport useMeeting from 'hooks/useMeeting';\nimport useTickets from 'hooks/useTickets';\nimport { getVotersFromMeeting } from 'services/utils';\nimport { ArrowLeft, Edit, Save } from 'svgs';\nimport Layout from 'components/Layout';\nimport MeetingIntroAlert from './MeetingIntroAlert';\nimport Ticket from './Ticket';\nimport EditObserverList from './EditObserverList';\nimport NewTicketSection from './NewTicketSection';\nimport ProgressBar from 'components/ProgressBar';\nimport { ProfileProvider } from 'containers/Profile';\nexport default function MeetingScreen() {\n  var query = useQuerystring(); // Waiting to read from url\n\n  if (query === null) return null; // Not valid\n\n  if (query.mid === undefined || _Array$isArray(query.mid) || query.mid === '') {\n    console.warn('Landed on meeting page with invalid mid in querystring', query);\n    Router.push('/');\n    return null;\n  }\n\n  return React.createElement(Gatekeeper, null, React.createElement(ProfileProvider, null, React.createElement(MeetingPage, {\n    mid: query.mid\n  })));\n}\n\nfunction MeetingPage(_ref) {\n  var mid = _ref.mid;\n  // Data\n  var userState = useContext(AuthConsumer);\n  var uid = userState.user.uid;\n\n  var _useMeeting = useMeeting(mid),\n      meeting = _useMeeting.meeting,\n      updateMeeting = _useMeeting.updateMeeting;\n\n  var _useTickets = useTickets(mid),\n      _useTickets2 = _slicedToArray(_useTickets, 2),\n      tickets = _useTickets2[0],\n      isFetchingTickets = _useTickets2[1]; // UI state\n\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isEditingMeeting = _useState2[0],\n      setEditingMeeting = _useState2[1]; // Edit Form\n\n\n  var formTitleRef = useRef(null);\n\n  var _useState3 = useState(meeting.title),\n      _useState4 = _slicedToArray(_useState3, 2),\n      formTitle = _useState4[0],\n      updateFormTitle = _useState4[1];\n\n  useEffect(function () {\n    return updateFormTitle(meeting.title);\n  }, [meeting]); // Focus on entering edit mode\n\n  useEffect(function () {\n    if (isEditingMeeting && formTitleRef.current) {\n      formTitleRef.current.focus();\n    }\n  }, [isEditingMeeting]); // Validate, update meeting and exit edit mode\n\n  var handleSubmit = function handleSubmit(e) {\n    e.preventDefault();\n\n    if (formTitle.trim() === '') {\n      // add error\n      return;\n    }\n\n    if (formTitle.trim() !== meeting.title) {\n      // Optimistically update our state to avoid a flash\n      updateMeeting(function (s) {\n        return _objectSpread({}, s, {\n          title: formTitle\n        });\n      });\n      fservice.updateMeeting({\n        title: formTitle,\n        id: meeting.id\n      });\n    }\n\n    setEditingMeeting(false);\n  }; // Reset form fields, and exit edit mode\n\n\n  var handleReset = function handleReset() {\n    setEditingMeeting(false);\n    updateFormTitle(meeting.title);\n  };\n\n  var percTicketsCompleted = tickets.length ? Math.round(tickets.filter(function (t) {\n    return t.isRevealed;\n  }).length / tickets.length * 100) : 0;\n  return React.createElement(Layout, null, React.createElement(\"nav\", {\n    className: \"mb-3\"\n  }, React.createElement(Link, {\n    href: \"/dashboard\"\n  }, React.createElement(\"a\", {\n    className: \"inline-flex items-center py-2 text-teal-7 hover:text-teal-8 no-underline font-header text-base\"\n  }, React.createElement(ArrowLeft, {\n    className: \"w-6 h-6 mr-1\"\n  }), React.createElement(\"div\", null, \"dashboard\")))), !isEditingMeeting && React.createElement(\"div\", {\n    className: \"mb-6\"\n  }, React.createElement(\"div\", {\n    className: \"flex items-start mb-6\"\n  }, React.createElement(\"h1\", {\n    className: \"flex-1 py-2 text-xl leading-tight border-b border-transparent\"\n  }, meeting.title), React.createElement(\"button\", {\n    title: \"Edit meeting details\",\n    type: \"button\",\n    className: \"ml-3 btn-fab btn--grey\",\n    onClick: function onClick() {\n      return setEditingMeeting(function (v) {\n        return !v;\n      });\n    }\n  }, React.createElement(Edit, {\n    className: \"w-4 h-4\"\n  }))), React.createElement(ProgressBar, {\n    percent: percTicketsCompleted\n  }, \"Tickets Pointed \", percTicketsCompleted, \"%\")), isEditingMeeting && React.createElement(React.Fragment, null, React.createElement(\"form\", {\n    className: \"flex items-start mb-6\",\n    onSubmit: handleSubmit,\n    autoComplete: \"off\"\n  }, React.createElement(\"input\", {\n    ref: formTitleRef,\n    className: cx('flex-1 font-header text-xl leading-tight', 'py-2 block w-full placeholder:text-grey-8', 'border-b border-gray-3', 'outline-none focus:border-teal-7'),\n    placeholder: \"Meeting title\",\n    value: formTitle,\n    onChange: function onChange(e) {\n      return updateFormTitle(e.target.value);\n    },\n    required: true,\n    onKeyDown: function onKeyDown(e) {\n      return e.key === 'Escape' && handleReset();\n    }\n  }), React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"ml-3 btn btn--violet\"\n  }, React.createElement(Save, {\n    className: \"w-4 h-4 mr-3\"\n  }), \"Save\")), React.createElement(\"section\", {\n    className: \"mb-6\"\n  }, React.createElement(\"h1\", {\n    className: \"text-lg mb-2\"\n  }, \"Move users between roles\"), React.createElement(EditObserverList, {\n    meeting: meeting,\n    addUserToObserverList: function addUserToObserverList(anyUID) {\n      return fservice.addUserToObserverList(mid, anyUID);\n    },\n    removeUserFromObserverList: function removeUserFromObserverList(anyUID) {\n      return fservice.removeUserFromObserverList(mid, anyUID);\n    }\n  }))), !isFetchingTickets && React.createElement(React.Fragment, null, tickets.length === 0 && React.createElement(MeetingIntroAlert, null), tickets.length > 0 && React.createElement(\"ol\", {\n    className: \"mb-6 list-reset -mx-3 md:-mx-6 lg:-mx-8\"\n  }, tickets.map(function (t, i) {\n    return React.createElement(\"li\", {\n      key: t.id,\n      className: cx({\n        'relative py-3': true,\n        'px-3 md:px-6 lg:px-8': true,\n        // match layout\n        'border-b': true,\n        'border-t': !i,\n        'bg-violet-0': t.id === meeting.focus\n      })\n    }, meeting.focus === t.id && React.createElement(\"div\", {\n      className: \"w-1 bg-violet-5 absolute pin-t pin-l pin-b\"\n    }), React.createElement(Ticket, {\n      mid: mid,\n      ticket: t,\n      onFocusClick: function onFocusClick() {\n        return fservice.updateMeeting({\n          id: mid,\n          focus: t.id === meeting.focus ? null : t.id\n        });\n      },\n      disableVoting: Boolean(meeting.observerIDs[uid]),\n      currentVote: t.votes[uid],\n      voterList: getVotersFromMeeting(meeting)\n    }));\n  })), React.createElement(NewTicketSection, {\n    mid: mid,\n    className: \"mb-6\"\n  })));\n}","map":null,"metadata":{},"sourceType":"module"}