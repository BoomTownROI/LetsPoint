{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\n\n/**\n * Finds the closest average fibonacci number\n * 0 and under are removed\n */\nexport default function closestFib(votes) {\n  var validVotes = votes.filter(function (v) {\n    return v > 0;\n  }).filter(function (v) {\n    return isFinite(v);\n  });\n  var average = validVotes.reduce(function (prev, v) {\n    return prev + v;\n  }, 0) / validVotes.length;\n  if (isNaN(average) || average === 0) return 0; // Find two fib number that bound the value\n\n  var fib0 = 0;\n  var fib1 = 1;\n\n  while (!isBound(fib0, average, fib1)) {\n    var nextFib1 = fib1 + fib0;\n    fib0 = fib1;\n    fib1 = nextFib1;\n\n    if (nextFib1 > 1000) {\n      throw new Error(\"You are spinning on calculating nextFib: votes: \".concat(_JSON$stringify(votes)));\n    }\n  } // Which Fib number are we closer to\n\n\n  var isCloserToFib0 = average - fib0 < fib1 - average;\n  return isCloserToFib0 ? fib0 : fib1;\n}\n\nfunction isBound(lower, val, upper) {\n  return lower <= val && val <= upper;\n}","map":null,"metadata":{},"sourceType":"module"}