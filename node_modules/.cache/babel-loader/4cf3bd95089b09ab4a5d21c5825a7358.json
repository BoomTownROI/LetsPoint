{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport fservice from 'services/fservice';\nvar AuthState = {\n  isStatusReported: false,\n  isLoggedIn: false,\n  user: {\n    displayName: '',\n    email: '',\n    photoURL: '',\n    uid: ''\n  }\n};\nvar AuthContext = React.createContext(AuthState);\nexport default AuthContext;\nexport function AuthProvider(props) {\n  var _useState = useState(AuthState),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  useEffect(function () {\n    return fservice.auth.onAuthStateChanged(function (user) {\n      if (user) {\n        setState({\n          isStatusReported: true,\n          isLoggedIn: true,\n          user: {\n            displayName: user.displayName || '',\n            email: user.email || '',\n            photoURL: user.photoURL || '',\n            uid: user.uid\n          }\n        });\n      } else {\n        setState({\n          isStatusReported: true,\n          isLoggedIn: false,\n          user: _objectSpread({}, AuthState.user)\n        });\n      }\n    });\n  }, [] // Never re-run this effect\n  );\n  return React.createElement(AuthContext.Provider, {\n    value: state,\n    children: props.children\n  });\n}","map":null,"metadata":{},"sourceType":"module"}