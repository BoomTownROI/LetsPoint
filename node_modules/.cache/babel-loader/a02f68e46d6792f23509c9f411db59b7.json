{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport { useEffect, useState, useContext } from 'react';\nimport Router from 'next/router';\nimport fservice from 'services/fservice';\nimport { meetingFromSnap } from 'schema';\nimport AuthConsumer from 'containers/Auth';\nexport default function useMeeting(mid) {\n  var userState = useContext(AuthConsumer);\n  var uid = userState.user.uid; // Fetching the meeting\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isFetchingMeeting = _useState2[0],\n      updateIsFetching = _useState2[1];\n\n  var _useState3 = useState(meetingFromSnap({\n    id: mid,\n    data: function data() {\n      return {};\n    }\n  })),\n      _useState4 = _slicedToArray(_useState3, 2),\n      meeting = _useState4[0],\n      updateMeeting = _useState4[1];\n\n  useEffect(function () {\n    return fservice.onMeeting(mid, function (meetingData) {\n      // No meeting, redirect\n      if (meetingData === false) {\n        console.warn(\"Request for meetings?mid=\".concat(mid, \" dne in db\"));\n        Router.push('/dashboard');\n        return;\n      } // Have a meeting, update state\n\n\n      updateIsFetching(false);\n      updateMeeting(meetingData); // meeting.status is 'public' so add ourselves to the participant list\n\n      if (meetingData.participantIDs[uid] === undefined) {\n        fservice.addSelfToMeeting(mid);\n      }\n    });\n  }, [mid, uid]);\n  return {\n    meeting: meeting,\n    isFetchingMeeting: isFetchingMeeting,\n    updateMeeting: updateMeeting\n  };\n}","map":null,"metadata":{},"sourceType":"module"}